[
    {
        "data": "import QtQuick 2.0\n\nRectangle {\n    id:btn\n\n    property int tipo\n    property string texto\n    property string imageSource\n\n    property alias mouseArea:mouse\n\n    color:translateColor(tipo)\n//    radius:200\n\n    Loader {\n        id:loader\n\n        anchors.centerIn: parent\n        sourceComponent: textOrImage(imageSource)\n    }\n\n    Component {\n        id:textComponent\n\n        Text {\n            anchors.centerIn: parent\n            font.pixelSize: btn.height*(0.7)\n            font.bold: true\n            text:texto\n        }\n    }\n\n    Component{\n        id:imageComponent\n\n        Image {\n            anchors.centerIn: parent\n\n            width: smaller(btn.height, btn.width)\n            height: smaller(btn.height, btn.width)\n\n            scale:0.8\n            source:imageSource\n        }\n    }\n    MouseArea {\n        id:mouse\n\n        anchors.fill:parent\n\n        onPressed: {\n            btn.color=Qt.lighter(btn.color, 1.3);\n        }\n\n        onReleased: {\n            btn.color=translateColor(tipo)\n        }\n    }\n    function translateColor(tipo) {\n\n        switch(tipo){\n\n        case 0:\n            return \"#FFB833\"\n        case 1:\n            return \"lightblue\"\n        case 2:\n            return \"red\"\n        }\n    }\n    function smaller(height, width) {\n\n        if(height > width)\n            return width\n        return height\n    }\n    function textOrImage(source) {\n        if(source === \"\") {\n            return textComponent\n        } else {\n            return imageComponent\n        }\n    }\n}\n\n\n\n",
        "length": "1528",
        "name": "CommonBtn.qml"
    },
    {
        "data": "import QtQuick 2.0\n\nimport \"computacaoBtnFunctions.js\" as ComputacaoBtnFunction\n\nCommonBtn {\n\n    id:btn\n\n    property bool geoToggle: false\n\n    mouseArea.onClicked: {\n        switch(texto) {\n        case \"BIN\":\n\n            textDisplay.text = ComputacaoBtnFunction.toBin(textDisplay.text)\n\n            break\n\n        case \"OCT\":\n\n            textDisplay.text = ComputacaoBtnFunction.toOct(textDisplay.text)\n\n            break\n\n        case \"HEX\":\n\n            textDisplay.text = ComputacaoBtnFunction.toHex(textDisplay.text)\n\n            break\n\n\n        default:\n            if(texto === \"C\"){\n                ComputacaoBtnFunction.backspace(textDisplay.text)\n            } else {\n                if(!tipo)\n                    textDisplay.text += texto\n                else {\n                    textDisplay.text += texto\n                    operators.enabled = false;\n                }\n            }\n        }\n    }\n    mouseArea.onPressAndHold: {\n\n        if(texto === \"C\"){\n            btn.color=Qt.lighter(btn.color, 1.3);\n            textDisplay.text = \"\"\n        }\n    }\n}\n\n\n",
        "length": "1083",
        "name": "ComputacaoBtn.qml"
    },
    {
        "data": "function backspace(equation) {\n    textDisplay.text = equation.substring(0, equation.length - 1);\n}\nfunction toBin(num) {\n    return parseFloat(parseFloat(num)).toString(2);\n}\nfunction toOct(num) {\n    return parseFloat(parseFloat(num)).toString(8);\n}\nfunction toHex(num) {\n    return parseFloat(parseFloat(num)).toString(16);\n}\n",
        "length": "329",
        "name": "computacaoBtnFunctions.js"
    },
    {
        "data": "import QtQuick 2.0\n\nItem {\n    ListModel {\n        id: btnModel\n\n        ListElement {\n            elements: [\n                ListElement { name: \"C\" ; type:2 ; src:\"\" },\n                ListElement { name: \"1\" ; type:0 ; src:\"\" },\n                ListElement { name: \"2\" ; type:0 ; src:\"\" },\n                ListElement { name: \"3\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"BIN\" ; type:1 ; src:\"\" },\n                ListElement { name: \"4\" ; type:0 ; src:\"\" },\n                ListElement { name: \"5\" ; type:0 ; src:\"\" },\n                ListElement { name: \"6\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"OCT\" ; type:1 ; src:\"\" },\n                ListElement { name: \"7\" ; type:0 ; src:\"\" },\n                ListElement { name: \"8\" ; type:0 ; src:\"\" },\n                ListElement { name: \"9\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"HEX\" ; type:1 ; src:\"\" },\n                ListElement { name: \".\" ; type:0 ; src:\"\" },\n                ListElement { name: \"0\" ; type:0 ; src:\"\" },\n                ListElement { name: \"\" ; type:0 ; src:\"\"  }\n            ]\n        }\n    }\n\n\n    ListModel {\n        id: operatorsModel\n\n        ListElement {\n            elements: [\n                ListElement { name: \"\" ; type:1 ; src:\"\" }\n            ]\n        }\n    }\n\n    Component {\n\n        id: btnDelegate\n\n        Row{\n\n            //            spacing:2\n\n            Repeater {\n                model: elements\n                ComputacaoBtn {\n                    texto: name\n                    tipo:type\n                    imageSource:src\n                    width: appWindow.width/4\n                    height: appWindow.height/8\n                }\n            }\n        }\n    }\n\n    Component {\n\n        id: operatorDelegate\n\n        Repeater {\n            model: elements\n            ComputacaoBtn {\n                texto: name\n                tipo:type\n                imageSource:src\n                width: appWindow.width/count\n                height: appWindow.height/8\n            }\n        }\n    }\n\n    Rectangle {\n\n        anchors.top: parent.top\n        anchors.topMargin: appWindow.height/4\n\n        anchors.right: parent.right\n        anchors.left: parent.left\n        anchors.bottom: parent.bottom\n\n        color:\"transparent\"\n\n        Column {\n            id:buttons\n            anchors.fill: parent\n\n            spacing:2\n\n            Repeater {\n                model:btnModel\n                delegate: btnDelegate\n            }\n            Row{\n                id:operators\n                Repeater {\n                    model:operatorsModel\n                    delegate: operatorDelegate\n                }\n            }\n        }\n    }\n}\n",
        "length": "2905",
        "name": "ComputacaoPanel.qml"
    },
    {
        "data": "{\n\t\"Description\":\"A qml calculator\",\n\t\"Services\":[\n\t\t{\n\t\t}\n\t]\n}",
        "length": "63",
        "name": "description.json"
    },
    {
        "data": "import QtQuick 2.0\n\nimport \"geometryBtnFunctions.js\" as GeometryBtnFunction\n\nCommonBtn {\n\n    id:btn\n\n    property bool geoToggle: false\n\n    mouseArea.onClicked: {\n        switch(texto) {\n        case \"Sen\":\n\n            textDisplay.text = Math.sin(GeometryBtnFunction.toRadians(textDisplay.text))\n\n            break\n\n        case \"Cos\":\n\n            textDisplay.text = Math.cos(GeometryBtnFunction.toRadians(textDisplay.text))\n\n            break\n\n        case \"Tan\":\n\n            textDisplay.text = Math.tan(GeometryBtnFunction.toRadians(textDisplay.text))\n\n            break\n\n        default:\n            if(texto === \"C\"){\n                PrimaryBtnFunction.backspace(textDisplay.text)\n            } else {\n                if(!tipo)\n                    textDisplay.text += texto\n                else {\n                    textDisplay.text += texto\n                    operators.enabled = false;\n                }\n            }\n        }\n    }\n    mouseArea.onPressAndHold: {\n\n        btn.color=Qt.lighter(btn.color, 1.3);\n\n        if(texto === \"C\"){\n            textDisplay.text = \"\"\n        }\n    }\n}\n\n\n",
        "length": "1108",
        "name": "GeometryBtn.qml"
    },
    {
        "data": "function toRadians (angle) {\n  return angle * (Math.PI / 180);\n}\n",
        "length": "65",
        "name": "geometryBtnFunctions.js"
    },
    {
        "data": "import QtQuick 2.0\n\nRectangle {\n\n    property int panelY\n    property int panelSpacing\n\n    color:\"transparent\"\n\n    ListModel {\n        id:listBtns\n\n        ListElement{ name:\"Sen\" }\n        ListElement{ name:\"Cos\" }\n        ListElement{ name:\"Tan\" }\n    }\n\n    Column {\n\n        y:panelY\n        spacing: panelSpacing\n\n        Repeater {\n            model:listBtns\n            delegate: GeometryBtn {\n                texto: name\n                tipo:1\n                imageSource:\"\"\n                width: appWindow.width/4\n                height: appWindow.height/8\n            }\n        }\n    }\n}\n\n",
        "length": "602",
        "name": "GeometryPanel.qml"
    },
    {
        "data": "ï¿½PNG\r\n\u001a\n",
        "length": "5998",
        "name": "icon.png"
    },
    {
        "data": "import QtQuick 2.4\nimport QtQuick.Controls 1.3\n\nimport \".\" as Comp\n\nRectangle {\n    id: appWindow\n\tanchors.fill:parent\n\n    color: \"black\"\n\n    Rectangle {\n\n        anchors.bottomMargin: 2.26*parent.height/3\n        anchors.bottom: parent.bottom\n\n        anchors.right: parent.right\n        anchors.left: parent.left\n        anchors.top: parent.top\n\n        color:\"transparent\"\n\n        Text{\n            id:textDisplay\n            text:\"\"\n\n            anchors.bottom: parent.bottom\n            anchors.right: parent.right\n\n            color:\"white\"\n            font.pixelSize: (parent.height/4) - text.length*1.4\n        }\n    }\n\n    Comp.NormalPanel{ id:normalPanel }\n    Comp.ComputacaoPanel{ id:compPanel  ; visible:false}\n\n}\n\n\n\n\n",
        "length": "734",
        "name": "main.qml"
    },
    {
        "data": "import QtQuick 2.0\n\nItem {\n    ListModel {\n        id: btnModel\n\n        ListElement {\n            elements: [\n                ListElement { name: \"C\" ; type:2 ; src:\"\" },\n                ListElement { name: \"1\" ; type:0 ; src:\"\" },\n                ListElement { name: \"2\" ; type:0 ; src:\"\" },\n                ListElement { name: \"3\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"R\" ; type:1 ; src:\"\" },\n                ListElement { name: \"4\" ; type:0 ; src:\"\" },\n                ListElement { name: \"5\" ; type:0 ; src:\"\" },\n                ListElement { name: \"6\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"^\" ; type:1 ; src:\"\" },\n                ListElement { name: \"7\" ; type:0 ; src:\"\" },\n                ListElement { name: \"8\" ; type:0 ; src:\"\" },\n                ListElement { name: \"9\" ; type:0 ; src:\"\" }\n            ]\n        }\n        ListElement {\n            elements: [\n                ListElement { name: \"GEO\" ; type:1 ; src:\"\" },\n                ListElement { name: \".\" ; type:0 ; src:\"\" },\n                ListElement { name: \"0\" ; type:0 ; src:\"\" },\n                ListElement { name: \"=\" ; type:0 ; src:\"\"  }\n            ]\n        }\n    }\n\n\n    ListModel {\n        id: operatorsModel\n\n        ListElement {\n            elements: [\n                ListElement { name: \"+\" ; type:1 ; src:\"\"},\n                ListElement { name: \"-\" ; type:1 ; src:\"\" },\n                ListElement { name: \"*\" ; type:1 ; src:\"\" },\n                ListElement { name: \"/\" ; type:1 ; src:\"\" }\n            ]\n        }\n    }\n\n    Component {\n\n        id: btnDelegate\n\n        Row{\n\n            //            spacing:2\n\n            Repeater {\n                model: elements\n                PrimaryBtn {\n                    texto: name\n                    tipo:type\n                    imageSource:src\n                    width: appWindow.width/4\n                    height: appWindow.height/8\n                }\n            }\n        }\n    }\n\n    Component {\n\n        id: operatorDelegate\n\n        Repeater {\n            model: elements\n            PrimaryBtn {\n                texto: name\n                tipo:type\n                imageSource:src\n                width: appWindow.width/4\n                height: appWindow.height/8\n            }\n        }\n    }\n\n    Rectangle {\n\n        anchors.top: parent.top\n        anchors.topMargin: appWindow.height/4\n\n        anchors.right: parent.right\n        anchors.left: parent.left\n        anchors.bottom: parent.bottom\n\n        color:\"transparent\"\n\n        Column {\n            id:buttons\n            anchors.fill: parent\n\n            spacing:2\n\n            Repeater {\n                model:btnModel\n                delegate: btnDelegate\n            }\n            Row{\n                //            spacing:2\n                id:operators\n                Repeater {\n                    model:operatorsModel\n                    delegate: operatorDelegate\n                }\n            }\n        }\n\n        GeometryPanel{\n            id:geometryPanel\n\n            panelY: buttons.anchors.topMargin\n            panelSpacing: buttons.spacing\n\n            visible: false\n        }\n    }\n}\n",
        "length": "3295",
        "name": "NormalPanel.qml"
    },
    {
        "data": "import QtQuick 2.0\n\nimport \"./primaryBtnFunctions.js\" as PrimaryBtnFunction\n\nCommonBtn {\n\n    id:btn\n\n    property bool geoToggle: false\n\n    mouseArea.onClicked: {\n        switch(texto) {\n        case \"=\":\n\n            var equation = textDisplay.text\n\n            operators.enabled = true;\n            textDisplay.text = \"\"\n\n            PrimaryBtnFunction.operation(equation)\n\n            break\n\n        case \"R\" :\n\n            textDisplay.text = Math.sqrt(textDisplay.text)\n\n            break\n\n        case \"GEO\" :\n\n            if(!geoToggle) {\n                geoToggle = true\n                btn.color=Qt.lighter(btn.color, 1.4)\n            } else {\n                geoToggle = false\n                btn.color=\"lightblue\"\n            }\n\n            geometryPanel.visible = geoToggle\n\n            break\n\n        default:\n            if(texto === \"C\"){\n                PrimaryBtnFunction.backspace(textDisplay.text)\n            } else {\n                if(!tipo)\n                    textDisplay.text += texto\n                else {\n                    textDisplay.text += texto\n                    operators.enabled = false;\n                }\n            }\n        }\n    }\n    mouseArea.onPressAndHold: {\n\n        if(texto === \"C\"){\n            btn.color=Qt.lighter(btn.color, 1.3);\n            textDisplay.text = \"\"\n        }\n    }\n}\n\n\n",
        "length": "1339",
        "name": "PrimaryBtn.qml"
    },
    {
        "data": "function backspace(equation) {\n    textDisplay.text = equation.substring(0, equation.length - 1);\n}\nfunction operation(equation) {\n\n    var numbers;\n    var resultado;\n\n    if(equation.indexOf(\"+\") > -1) {\n\n        numbers = equation.split(\"+\")\n\n        textDisplay.text = parseFloat(parseFloat(numbers[0])\n                                      +\n                                      parseFloat(numbers[1]))\n\n\n    }\n    else if(equation.indexOf(\"-\") > -1) {\n        numbers = equation.split(\"-\")\n        textDisplay.text = parseFloat(parseFloat(numbers[0])\n                                      -\n                                      parseFloat(numbers[1]));\n    }\n    else if(equation.indexOf(\"*\") > -1) {\n        numbers = equation.split(\"*\")\n        textDisplay.text = parseFloat(parseFloat(numbers[0])\n                                      *\n                                      parseFloat(numbers[1]));\n    }\n    else if(equation.indexOf(\"/\") > -1) {\n        numbers = equation.split(\"/\")\n        textDisplay.text = parseFloat(parseFloat(numbers[0])\n                                      /\n                                      parseFloat(numbers[1]));\n    }\n    else if(equation.indexOf(\"^\") > -1) {\n        numbers = equation.split(\"^\")\n        textDisplay.text = parseFloat(Math.pow(parseFloat(numbers[0]),\n                                      parseFloat(numbers[1])));\n    }\n}\n",
        "length": "1390",
        "name": "primaryBtnFunctions.js"
    }
]
