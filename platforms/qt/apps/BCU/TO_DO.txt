+-----------+
| ANOTAÇÕES |
+-----------+

- incluir arquivos do BRisa (OK)
- criar uma classe baseada em um control point (OK)
- filtrar o deviceType por urn:org.compelab.AppServer:1 (OK)
- modificações no control point original (OK):
  * o device encontrado deve possuir os serviços que possuam as ações abaixo,
    caso contrário, o device não será válido
    ~> getListOfApps
    ~> getAppInfo
    ~> getApp
    ** o método relativo aos serviços que será modificado no novo cp
    será replyFinished de ControlPoint (no BRisa, em upnp/controlpoint)
  * o control point deve ser capaz de decodificação a compactação .compe (OK)
- realizar a inicialização de todos os serviços necessários a um cp (OK)
- criar uma interface gráfica; inicialmente, será uma tela em branco e os
  devices válidos deverão ser listados de forma semelhante ao que acontece num
  menu de aplicativos (como um grid). Ao "tocar / clicar" num device, as opções
  sobre e carregar o app serão mostradas; a primeira, carregará uma informações
  a respeito do aplicativo e a segunda fará o download / atualização / abrirá o
  app. Durante esse processo, uma splash screen é exibida. (OK)
- criar um novo device no grid toda vez que um device válido for encontrado
  (OK)
   * pelo que andei pesquisando, a solução é usar um GridView. Essas referências
     devem ajudar (OK)
     ~> http://doc.qt.io/qt-5/qtquick-modelviewsdata-cppmodels.html#exposing-c-data-models-to-qml
     ~> http://doc.qt.io/qt-5/qml-qtquick-gridview.html
   * descobrir como passar os dados de model adiante (OK)
   * adicionar as outras propriedades em dataobject.h, como o ícone e a url para
     download do app (OK)
   * Se houver, usar o ícone do app no GridView. Se não, usar um ícone padrão (OK)
   * remover o device do grid quando ele sair da rede (implementado mas não
     testado, pois o BCA não está emitindo um "ssdp:bye bye")
- alterar o passo acima, o correto seria criar um novo ícone para cada app de getListOfApps
- baixar o app e carregar (em qml) dinamicamente
